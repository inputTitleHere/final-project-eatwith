<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 이거 property-placeholder는 1개이상 선언하면 안된다. datasource하고 email을 동시에 로드할려면 와일드카드를 사용하거나 콤마로 구분. -->	
	<context:property-placeholder location="classpath:*.properties"/>
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- #6.1 datasource bean등록 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- DB접속정보를 전달해주어야한다. -->
		<property name="driverClassName" value="${datasource.driver}"/>
		<property name="url" value="${datasource.url}"/>
		<property name="username" value="${datasource.username}"/>
		<property name="password" value="${datasource.password}"/>
	</bean> <!-- ctrl+호버으로 링크가 걸리는지 확인 -->
	<!-- #6.2 mybatis SqlSessionFactoryBean, sqlSessionTemplate 빈 등록 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/> <!-- 대소문자 구분 중요!. 내 메소드를 사용하는게 아니다. -->
		<!-- name -> setter의 이름을 속칭(setDataSource), ref는 위의 id으로 설정한 dataSource를 지칭 -->
		<property name="mapperLocations" value="classpath*:mapper/**/*-mapper.xml"/> <!-- classpath아래의 mapper 아래의 무슨 파일이던 속의 무슨무슨-mapper.xml파일을 여러개(classpath*)로딩해줘-->
		<property name="configLocation" value="classpath:mybatis-config.xml"/><!-- 하나므로 classpath옆에 *이 안붙는다. -->
	</bean>
	<!-- 아래는 sqlSession인터페이스 구현체. Dao구현체 클래스에 DI되어 실행됨/ Dao별로 공유됨-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" index="0"/>
	</bean>
	<!-- #6.3 @Mapper 인터페이스 등록. Dao구현객체를 동적으로 생성해준다. -->
	<mybatis-spring:scan base-package="com.kh.**.dao"/> <!-- com.kh.spring아래로 뭐가 있던지 간에 dao패키지 -> security추가함으로써 spring 글자를 지우고 그냥 com.kh.**으로 수행.-->
	
	<!-- #11.1 트랜젝션 매니저 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- @Transactional 어노테이션 Transaction Adivce를 적용 -->
	<tx:annotation-driven transaction-manager="transactionManager"/> <!-- 이미 다 만들어져있다. 뒤의 transaction-manager의 transactionManager으로 기본값 세팅이 되어있어서 써줄 필요는 없지만 bean이름이 다르면 적어주어야 한다.-->
	<!-- 이메일 관련 -->
	<!-- https://devofroad.tistory.com/43 -->
	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="${email.account}" />
		<property name="password" value="${email.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
			</props>
		</property>
	</bean>
	
	
	
</beans>
