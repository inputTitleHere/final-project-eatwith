<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- <beans:import resource="classpath:cors-config.xml"/> -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan
		base-package="com.kh.eatwith" />

	<!-- #8 interceptor 등록 -->
	<!-- <interceptors> <interceptor> <mapping path="/**"/> <beans:bean id="logInterceptor" 
		class="com.kh.spring.common.interceptor.LogInterceptor"/> </interceptor> -->
	<!-- board는 모두 로그인 필요. ** = 와일드카드처리(모두) -->
	<!-- exclude mapping -> 이거는 매핑 안함 -->
	<!-- <interceptor> <mapping path="/member/memberDetail.do"/> <mapping path="/member/memberUpdate.do"/> 
		<mapping path="/board/**"/> <exclude-mapping path="/board/boardList.do"/> 
		<exclude-mapping path="/board/boardDetail.do"/> <exclude-mapping path="/board/fileDownload.do"/> 
		<beans:bean id="LoginInterceptor" class="com.kh.spring.common.interceptor.LoginInterceptor"/> 
		</interceptor> </interceptors> -->

	<!-- #9.1 AOP관련 Annotation 등록처리 -->
	<!-- #11.2 root-context의 트랜젝션 관련 처리를 가져와 servlet-context에 적용 -->
	<aop:aspectj-autoproxy />

	<!-- #10.1 multipartResolver -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일전송되면 먼저 읽어서 java메모리에 올려둠. -->
		<beans:property name="maxUploadSize" value="52428800"></beans:property> <!-- 50mb : 한건의 파일 요청시 첨부할 파일의 총 용량 --> <!-- 이거 설정 안하면 동영상 올리다가 서버 터질 수 있음 -->
		<beans:property name="maxUploadSizePerFile"
			value="10245760"></beans:property> <!-- 10메가 : 한건의 파일 당 용량제한 (위 기준으로 최대 5개) --> <!-- 안적으면 무제한이다.(서버 터질수 있다.) -->
		<beans:property name="maxInMemorySize" value="10240"></beans:property> <!-- 10kb이상이면 임시파일을 생성해서 관리하겠다.(크게 중요치 않음(스프링 내부에서 처리해줌))(위 2개 중요) -->
	</beans:bean>

	<!-- #12.1 jsonView 빈 등록 -->
	<beans:bean id="jsonView"
		class="net.sf.json.spring.web.servlet.view.JsonView">
		<beans:property name="contentType"
			value="application/json; charset=utf-8" />
	</beans:bean>

	<!-- #12.2 BeanNameViewResolver viewName에 해당하는 빈을 view로 연결하는 resolver -->
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1" /> <!-- -->
	</beans:bean>

	<!-- #13.1 jackson message converter bean등록 -->
	<beans:bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<!-- #14.1 echoHandler등록 -->
<!-- 	<websocket:handlers> 
		<websocket:mapping handler="echoHandler" path="/echo"/> 
		<websocket:sockjs />
	</websocket:handlers>-->
	<!-- #14.2 stomp -->
	<!-- <websocket:message-broker
		application-destination-prefix="/app">
		<websocket:stomp-endpoint path="/stomp">
			<websocket:sockjs />
		</websocket:stomp-endpoint>
		<websocket:simple-broker prefix="/topic, /app" />
	</websocket:message-broker>-->

	
</beans:beans>
